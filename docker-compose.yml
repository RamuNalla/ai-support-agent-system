version: '3.8' 

services:         # Defines all the containers that will run
  # -------------------- AI Agent Service (FastAPI Backend) --------------------
  agent_service:
    build:
      context: ./agent_service          # build the backend service from the 'agent_service' directory.
      dockerfile: Dockerfile            # Specifies the Dockerfile to use within that directory.
    container_name: agent_service       # Assigns a human-readable name to the container.
    ports:
      - "8000:8000"                     # Maps host port 8000 to container port 8000. This makes your FastAPI app accessible from your host machine.
      - "8001:8001"                     # NEW: Port for Prometheus metrics exposed by agent_service
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}    # Passes the GEMINI_API_KEY from your host's environment variables into the container.
      - AGENT_SERVICE_HOST=0.0.0.0          # Tells FastAPI inside the container to listen on all available network interfaces.
      - TRACING_ENABLED=true                # Enables OpenTelemetry tracing in your FastAPI app (as configured in app/main.py).
      - OTEL_SERVICE_NAME=ai-agent-service  # Sets the service name for OpenTelemetry traces and metrics.
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317      # Configures the OpenTelemetry exporter to send data to the 'otel-collector' service (its Docker Compose service name) on port 4317 (OTLP gRPC).
    volumes:
      - ./data:/app/data                    # Mounts the local 'data' directory (e.g., for FAISS index, feedback.jsonl) into the container's '/app/data'. This ensures data persists even if the container is removed.
    depends_on:
      - otel-collector                      # Ensures the 'otel-collector' service starts and is healthy before 'agent_service' starts.


  # -------------------- Streamlit UI Service (Frontend) --------------------
  ui_service:
    build:
      context: ./ui_service         # Builds this service from the 'ui_service' directory.
      dockerfile: Dockerfile        # Specifies the Dockerfile for the Streamlit app.
    container_name: ui_service      # Assigns a human-readable name to the container.
    ports:
      - "8501:8501"                 # Maps host port 8501 to container port 8501. This makes your Streamlit UI accessible from your host machine.
    environment:
      - AGENT_SERVICE_URL=http://agent_service:8000   # Uses the Docker Compose service name to communicate with agent_service. 'agent_service' resolves to the internal IP of the agent_service container.
    depends_on:
      - agent_service               # Ensures 'agent_service' starts before 'ui_service', as the UI depends on the agent API.


  # -------------------- Observability Stack --------------------
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.103.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./otel-collector-config.yml:/etc/otel-collector-config.yml
    ports:
      - "4317:4317" # OTLP gRPC endpoint for services to send traces/metrics
      - "8888:8888" # Collector's *internal* metrics endpoint (Prometheus does NOT scrape this for app metrics)
      - "8889:8889" # NEW: Map port 8889 for the Prometheus exporter to the host (Prometheus *DOES* scrape this for app metrics)
    
  # Prometheus: A monitoring system that scrapes metrics from configured targets. It stores these metrics as time-series data and provides a query language (PromQL).
  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus                   # Persistent storage for Prometheus data
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - otel-collector # Prometheus scrapes the collector
  
  
  # Grafana: A powerful open-source platform for data visualization and monitoring. It connects to various data sources (like Prometheus) to create interactive dashboards.
  grafana:
    image: grafana/grafana:11.1.0     # Uses a pre-built Grafana image.
    container_name: grafana           # Assigns a human-readable name.
    volumes:
      - grafana-data:/var/lib/grafana                                             # Mounts a named volume for persistent storage of Grafana's internal data (dashboards, data sources, users).
      - ./grafana_provisioning/dashboards:/etc/grafana/provisioning/dashboards    # Mounts a directory for provisioning dashboards from files.
      - ./grafana_provisioning/datasources:/etc/grafana/provisioning/datasources  # Mounts a directory for provisioning data sources from files.
    ports:
      - "3000:3000"                                                               # Maps host port 3000 to container port 3000, making the Grafana UI accessible.
    user: "472"                                                                   # Sets the user ID for the Grafana process. This is often necessary on Linux to ensure Grafana has correct permissions to write to mounted volumes.
    depends_on:
      - prometheus                                                                # Grafana needs Prometheus to query metrics.
      
    
volumes:
  grafana-data: # Defines the named volume 'grafana-data' which is used by the Grafana service for persistence.
  prometheus-data: